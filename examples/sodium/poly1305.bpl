// generated by SMACK version 1.5.1 for boogie
// via /home/vagrant/verifying-constant-time/tools/smack/bin/smack.py -t --verifier=boogie --entry-points crypto_onetimeauth_poly1305_donna_wrapper --unroll 1 --loop-limit 1 -bpl /home/vagrant/verifying-constant-time/examples/sodium/poly1305.bpl /home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c /home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c /home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c /home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c /home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c /home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/verify_poly1305_donna.c /home/vagrant/verifying-constant-time/examples/sodium/poly1305.c

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i48 = int;
type i64 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (65 regions)
var $M.0: [ref] i8;
var $M.1: [ref] i8;
var $M.2: [ref] i32;
var $M.3: [ref] i32;
var $M.4: [ref] i32;
var $M.5: [ref] i32;
var $M.6: i32;
var $M.7: i32;
var $M.8: [ref] i32;
var $M.9: [ref] i32;
var $M.10: [ref] i32;
var $M.11: [ref] i32;
var $M.12: [ref] i32;
var $M.13: [ref] i8;
var $M.14: [ref] i32;
var $M.15: [ref] i32;
var $M.16: [ref] i32;
var $M.17: [ref] ref;
var $M.18: [ref] ref;
var $M.19: [ref] ref;
var $M.20: [ref] i8;
var $M.21: [ref] i8;
var $M.22: [ref] i8;
var $M.23: [ref] i8;
var $M.24: [ref] i8;
var $M.25: [ref] i8;
var $M.26: [ref] i8;
var $M.27: [ref] i8;
var $M.28: [ref] i8;
var $M.29: [ref] i8;
var $M.30: [ref] i8;
var $M.31: [ref] i8;
var $M.32: [ref] i8;
var $M.33: [ref] i8;
var $M.34: [ref] i8;
var $M.35: [ref] i8;
var $M.36: [ref] i8;
var $M.37: [ref] i8;
var $M.38: [ref] i8;
var $M.39: [ref] i8;
var $M.40: [ref] i8;
var $M.41: [ref] i8;
var $M.42: [ref] i8;
var $M.43: [ref] i8;
var $M.44: [ref] i8;
var $M.45: [ref] i8;
var $M.46: [ref] i8;
var $M.47: [ref] i8;
var $M.48: [ref] i8;
var $M.49: [ref] i8;
var $M.50: [ref] i8;
var $M.51: [ref] i8;
var $M.52: [ref] i8;
var $M.53: i32;
var $M.54: [ref] ref;
var $M.55: [ref] ref;
var $M.56: [ref] ref;
var $M.57: [ref] ref;
var $M.58: [ref] i8;
var $M.59: [ref] ref;
var $M.60: [ref] ref;
var $M.61: [ref] ref;
var $M.62: [ref] ref;
var $M.63: [ref] ref;
var $M.64: [ref] ref;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 1121));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32768));
axiom ($MALLOC_TOP == 2136997887);

// Bitvector-integer conversions
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const .str1: ref;
const .str1991: ref;
const .str1996: ref;
const .str2: ref;
const .str2992: ref;
const .str3: ref;
const .str3993: ref;
const .str4994: ref;
const .str990: ref;
const .str995: ref;
const .str999: ref;
const U32TO8: ref;
const U8TO32: ref;
const {:count 65} __PRETTY_FUNCTION__.randombytes: ref;
const {:count 50} __PRETTY_FUNCTION__.safe_read: ref;
const __SMACK_code: ref;
const __SMACK_decls: ref;
const __SMACK_dummy: ref;
const __SMACK_init_func_memory_model: ref;
const __SMACK_static_init: ref;
const __SMACK_top_decl: ref;
const __SMACK_value: ref;
const __VERIFIER_assume: ref;
const __VERIFIER_nondet: ref;
const __VERIFIER_nondet_unsigned_char: ref;
const __VERIFIER_nondet_unsigned_int: ref;
const __VERIFIER_nondet_unsigned_long: ref;
const __VERIFIER_nondet_unsigned_short: ref;
const __assert_fail: ref;
const __errno_location: ref;
const _mprotect_noaccess: ref;
const _mprotect_readonly: ref;
const _mprotect_readwrite: ref;
const _sodium_malloc: ref;
const _sodium_mprotect: ref;
const abort: ref;
const {:count 16} canary: ref;
const close: ref;
const crypto_onetimeauth_poly1305_donna: ref;
const crypto_onetimeauth_poly1305_donna_final: ref;
const crypto_onetimeauth_poly1305_donna_implementation: ref;
const crypto_onetimeauth_poly1305_donna_implementation_name: ref;
const crypto_onetimeauth_poly1305_donna_init: ref;
const crypto_onetimeauth_poly1305_donna_update: ref;
const crypto_onetimeauth_poly1305_donna_verify: ref;
const crypto_onetimeauth_poly1305_donna_wrapper: ref;
const crypto_verify_16: ref;
const fcntl: ref;
const free_: ref;
const fstat: ref;
const implementation_: ref;
const llvm.dbg.declare: ref;
const llvm.dbg.value: ref;
const llvm.memset.p0i8.i64: ref;
const malloc: ref;
const open: ref;
const poly1305_blocks: ref;
const poly1305_finish: ref;
const poly1305_init: ref;
const poly1305_update: ref;
const public_in: ref;
const randombytes_buf: ref;
const randombytes_random: ref;
const randombytes_sysrandom: ref;
const randombytes_sysrandom_buf: ref;
const randombytes_sysrandom_close: ref;
const randombytes_sysrandom_implementation: ref;
const randombytes_sysrandom_implementation_name: ref;
const randombytes_sysrandom_init: ref;
const randombytes_sysrandom_random_dev_open: ref;
const {:count 3} randombytes_sysrandom_random_dev_open.devices: ref;
const randombytes_sysrandom_stir: ref;
const randombytes_sysrandom_stir_if_needed: ref;
const read: ref;
const safe_read: ref;
const sodium_malloc: ref;
const sodium_memzero: ref;
const strchr: ref;
const stream: ref;
procedure {:inline 1} $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
procedure {:inline 1} U32TO8(p: ref, v: i64)
{
  var $i0: i64;
  var $i1: i8;
  var $i11: i64;
  var $i12: i64;
  var $i13: i8;
  var $i3: i64;
  var $i4: i64;
  var $i5: i8;
  var $i7: i64;
  var $i8: i64;
  var $i9: i8;
  var $p10: ref;
  var $p14: ref;
  var $p2: ref;
  var $p6: ref;
$bb0:
  call {:cexpr "p"} boogie_si_record_ref(p);
  call {:cexpr "v"} boogie_si_record_i64(v);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 40, 9} true;
  $i0 := $and.i64(v, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 40, 9} true;
  $i1 := $trunc.i64.i8($i0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 40, 9} true;
  $p2 := p;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 40, 9} true;
  $M.21 := $store.i8($M.21, $p2, $i1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 41, 9} true;
  $i3 := $lshr.i64(v, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 41, 9} true;
  $i4 := $and.i64($i3, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 41, 9} true;
  $i5 := $trunc.i64.i8($i4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 41, 9} true;
  $p6 := $add.ref(p, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 41, 9} true;
  $M.21 := $store.i8($M.21, $p6, $i5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 42, 9} true;
  $i7 := $lshr.i64(v, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 42, 9} true;
  $i8 := $and.i64($i7, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 42, 9} true;
  $i9 := $trunc.i64.i8($i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 42, 9} true;
  $p10 := $add.ref(p, 2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 42, 9} true;
  $M.21 := $store.i8($M.21, $p10, $i9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 43, 9} true;
  $i11 := $lshr.i64(v, 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 43, 9} true;
  $i12 := $and.i64($i11, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 43, 9} true;
  $i13 := $trunc.i64.i8($i12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 43, 9} true;
  $p14 := $add.ref(p, 3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 43, 9} true;
  $M.21 := $store.i8($M.21, $p14, $i13);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 44, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} U8TO32(p: ref)
  returns ($r: i64)
{
  var $i1: i8;
  var $i10: i64;
  var $i11: i64;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i2: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i3: i32;
  var $i4: i64;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p0: ref;
  var $p12: ref;
  var $p19: ref;
  var $p5: ref;
$bb0:
  call {:cexpr "p"} boogie_si_record_ref(p);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $p0 := p;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i1 := $load.i8($M.0, $p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i2 := $zext.i8.i32($i1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i3 := $and.i32($i2, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $p5 := $add.ref(p, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i6 := $load.i8($M.0, $p5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i8 := $and.i32($i7, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i9 := $sext.i32.i64($i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i10 := $shl.i64($i9, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i11 := $or.i64($i4, $i10);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $p12 := $add.ref(p, 2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i13 := $load.i8($M.0, $p12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i14 := $zext.i8.i32($i13);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i15 := $and.i32($i14, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i16 := $sext.i32.i64($i15);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i17 := $shl.i64($i16, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i18 := $or.i64($i11, $i17);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $p19 := $add.ref(p, 3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i20 := $load.i8($M.0, $p19);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i21 := $zext.i8.i32($i20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i22 := $and.i32($i21, 255);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i23 := $sext.i32.i64($i22);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i24 := $shl.i64($i23, 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $i25 := $or.i64($i18, $i24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 30, 9} true;
  $r := $i25;
  $exn := false;
  return;
}
procedure {:inline 1} __SMACK_code.ref($p0: ref);
procedure {:inline 1} __SMACK_code.ref.i32($p0: ref, p.1: i32);
procedure {:inline 1} __SMACK_dummy(v: i32)
{
$bb0:
  call {:cexpr "v"} boogie_si_record_i32(v);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 79, 3} true;
  assume true;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 80, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 825, 3} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 826, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} __SMACK_static_init()
{
$bb0:
  $M.52 := $store.i8($M.52, canary, 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 1), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 2), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 3), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 4), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 5), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 6), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 7), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 8), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 9), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 10), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 11), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 12), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 13), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 14), 0);
  $M.52 := $store.i8($M.52, $add.ref(canary, 15), 0);
  $M.7 := $sub.i32(0, 1);
  $M.6 := 0;
  $M.53 := 0;
  $M.54 := $store.ref($M.54, randombytes_sysrandom_implementation, randombytes_sysrandom_implementation_name);
  $M.18 := $store.ref($M.18, $add.ref(randombytes_sysrandom_implementation, 8), randombytes_sysrandom);
  $M.55 := $store.ref($M.55, $add.ref(randombytes_sysrandom_implementation, 16), randombytes_sysrandom_stir);
  $M.56 := $store.ref($M.56, $add.ref(randombytes_sysrandom_implementation, 24), $0.ref);
  $M.19 := $store.ref($M.19, $add.ref(randombytes_sysrandom_implementation, 32), randombytes_sysrandom_buf);
  $M.57 := $store.ref($M.57, $add.ref(randombytes_sysrandom_implementation, 40), randombytes_sysrandom_close);
  $M.0 := $store.i8($M.0, __PRETTY_FUNCTION__.safe_read, 115);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 1), 115);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 2), 105);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 3), 122);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 4), 101);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 5), 95);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 6), 116);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 7), 32);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 8), 115);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 9), 97);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 10), 102);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 11), 101);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 12), 95);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 13), 114);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 14), 101);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 15), 97);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 16), 100);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 17), 40);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 18), 99);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 19), 111);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 20), 110);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 21), 115);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 22), 116);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 23), 32);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 24), 105);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 25), 110);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 26), 116);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 27), 44);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 28), 32);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 29), 118);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 30), 111);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 31), 105);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 32), 100);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 33), 32);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 34), 42);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 35), 99);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 36), 111);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 37), 110);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 38), 115);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 39), 116);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 40), 44);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 41), 32);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 42), 115);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 43), 105);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 44), 122);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 45), 101);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 46), 95);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 47), 116);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 48), 41);
  $M.0 := $store.i8($M.0, $add.ref(__PRETTY_FUNCTION__.safe_read, 49), 0);
  $M.13 := $store.ref($M.13, randombytes_sysrandom_random_dev_open.devices, .str3993);
  $M.13 := $store.ref($M.13, $add.ref(randombytes_sysrandom_random_dev_open.devices, 8), .str4994);
  $M.13 := $store.ref($M.13, $add.ref(randombytes_sysrandom_random_dev_open.devices, 16), $0.ref);
  $M.17 := $store.ref($M.17, implementation_, randombytes_sysrandom_implementation);
  call {:cexpr "implementation"} boogie_si_record_ref(randombytes_sysrandom_implementation);
  $M.58 := $store.i8($M.58, __PRETTY_FUNCTION__.randombytes, 118);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 1), 111);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 2), 105);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 3), 100);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 4), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 5), 114);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 6), 97);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 7), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 8), 100);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 9), 111);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 10), 109);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 11), 98);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 12), 121);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 13), 116);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 14), 101);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 15), 115);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 16), 40);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 17), 117);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 18), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 19), 115);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 20), 105);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 21), 103);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 22), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 23), 101);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 24), 100);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 25), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 26), 99);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 27), 104);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 28), 97);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 29), 114);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 30), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 31), 42);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 32), 99);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 33), 111);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 34), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 35), 115);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 36), 116);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 37), 44);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 38), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 39), 99);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 40), 111);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 41), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 42), 115);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 43), 116);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 44), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 45), 117);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 46), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 47), 115);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 48), 105);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 49), 103);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 50), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 51), 101);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 52), 100);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 53), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 54), 108);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 55), 111);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 56), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 57), 103);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 58), 32);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 59), 108);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 60), 111);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 61), 110);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 62), 103);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 63), 41);
  $M.58 := $store.i8($M.58, $add.ref(__PRETTY_FUNCTION__.randombytes, 64), 0);
  $M.59 := $store.ref($M.59, crypto_onetimeauth_poly1305_donna_implementation, crypto_onetimeauth_poly1305_donna_implementation_name);
  $M.60 := $store.ref($M.60, $add.ref(crypto_onetimeauth_poly1305_donna_implementation, 8), crypto_onetimeauth_poly1305_donna);
  $M.61 := $store.ref($M.61, $add.ref(crypto_onetimeauth_poly1305_donna_implementation, 16), crypto_onetimeauth_poly1305_donna_verify);
  $M.62 := $store.ref($M.62, $add.ref(crypto_onetimeauth_poly1305_donna_implementation, 24), crypto_onetimeauth_poly1305_donna_init);
  $M.63 := $store.ref($M.63, $add.ref(crypto_onetimeauth_poly1305_donna_implementation, 32), crypto_onetimeauth_poly1305_donna_update);
  $M.64 := $store.ref($M.64, $add.ref(crypto_onetimeauth_poly1305_donna_implementation, 40), crypto_onetimeauth_poly1305_donna_final);
  $exn := false;
  return;
}
procedure {:inline 1} __SMACK_top_decl.ref($p0: ref);
procedure {:inline 1} __SMACK_value.i64(p.0: i64)
  returns ($r: ref);
procedure {:inline 1} __SMACK_value.ref(p.0: ref)
  returns ($r: ref);
procedure {:inline 1} __VERIFIER_assume(x: i32)
{
$bb0:
  call {:cexpr "x"} boogie_si_record_i32(x);
  call {:cexpr "v"} boogie_si_record_i32(x);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 79, 3} true;
  assume true;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 31, 21} true;
  assume x != $0;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/tools/smack/share/smack/lib/smack.c", 32, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} __VERIFIER_nondet()
  returns ($r: ref);
procedure {:inline 1} __VERIFIER_nondet_unsigned_char()
  returns ($r: i8);
procedure {:inline 1} __VERIFIER_nondet_unsigned_int()
  returns ($r: i32);
procedure {:inline 1} __VERIFIER_nondet_unsigned_long()
  returns ($r: i64);
procedure {:inline 1} __VERIFIER_nondet_unsigned_short()
  returns ($r: i16);
procedure {:inline 1} __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
procedure {:inline 1} __errno_location()
  returns ($r: ref);
procedure {:inline 1} _mprotect_noaccess(ptr: ref, size: i64)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  call {:cexpr "ptr"} boogie_si_record_ref(ptr);
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 243, 5} true;
  call $p0 := __errno_location();
  assume $isExternal($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 243, 5} true;
  $M.2 := $store.i32($M.2, $p0, 38);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 244, 5} true;
  $r := $sub.i32(0, 1);
  $exn := false;
  return;
}
procedure {:inline 1} _mprotect_readonly(ptr: ref, size: i64)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  call {:cexpr "ptr"} boogie_si_record_ref(ptr);
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 257, 5} true;
  call $p0 := __errno_location();
  assume $isExternal($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 257, 5} true;
  $M.4 := $store.i32($M.4, $p0, 38);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 258, 5} true;
  $r := $sub.i32(0, 1);
  $exn := false;
  return;
}
procedure {:inline 1} _mprotect_readwrite(ptr: ref, size: i64)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  call {:cexpr "ptr"} boogie_si_record_ref(ptr);
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 271, 5} true;
  call $p0 := __errno_location();
  assume $isExternal($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 271, 5} true;
  $M.5 := $store.i32($M.5, $p0, 38);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 272, 5} true;
  $r := $sub.i32(0, 1);
  $exn := false;
  return;
}
procedure {:inline 1} _sodium_malloc(size: i64)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 355, 12} true;
  call $p0 := malloc(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 355, 12} true;
  $r := $p0;
  $exn := false;
  return;
}
procedure {:inline 1} _sodium_mprotect(ptr: ref, cb: ref)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  call {:cexpr "ptr"} boogie_si_record_ref(ptr);
  call {:cexpr "cb"} boogie_si_record_ref(cb);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 473, 5} true;
  call $p0 := __errno_location();
  assume $isExternal($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 473, 5} true;
  $M.3 := $store.i32($M.3, $p0, 38);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 474, 5} true;
  $r := $sub.i32(0, 1);
  $exn := false;
  return;
}
procedure {:inline 1} abort();
procedure {:inline 1} close($i0: i32)
  returns ($r: i32);
procedure {:inline 1} crypto_onetimeauth_poly1305_donna(out: ref, m: ref, inlen: i64, key: ref)
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  call $p0 := $alloc($mul.ref(144, $zext.i32.i64(1)));
  call {:cexpr "out"} boogie_si_record_ref(out);
  call {:cexpr "m"} boogie_si_record_ref(m);
  call {:cexpr "inlen"} boogie_si_record_i64(inlen);
  call {:cexpr "key"} boogie_si_record_ref(key);
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 54, 5} true;
  call poly1305_init($p0, key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 55, 5} true;
  call poly1305_update($p0, m, inlen);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 56, 5} true;
  call poly1305_finish($p0, out);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 58, 5} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} crypto_onetimeauth_poly1305_donna_final(state: ref, out: ref)
  returns ($r: i32)
{
$bb0:
  call {:cexpr "state"} boogie_si_record_ref(state);
  call {:cexpr "out"} boogie_si_record_ref(out);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 84, 5} true;
  call poly1305_finish(state, out);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 86, 5} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} crypto_onetimeauth_poly1305_donna_implementation_name()
  returns ($r: ref)
{
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 93, 5} true;
  $r := .str999;
  $exn := false;
  return;
}
procedure {:inline 1} crypto_onetimeauth_poly1305_donna_init(state: ref, key: ref)
  returns ($r: i32)
{
$bb0:
  call {:cexpr "state"} boogie_si_record_ref(state);
  call {:cexpr "key"} boogie_si_record_ref(key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 65, 5} true;
  call poly1305_init(state, key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 67, 5} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} crypto_onetimeauth_poly1305_donna_update(state: ref, in: ref, inlen: i64)
  returns ($r: i32)
{
$bb0:
  call {:cexpr "state"} boogie_si_record_ref(state);
  call {:cexpr "in"} boogie_si_record_ref(in);
  call {:cexpr "inlen"} boogie_si_record_i64(inlen);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 75, 5} true;
  call poly1305_update(state, in, inlen);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 77, 5} true;
  $r := 0;
  $exn := false;
  return;
}
procedure {:inline 1} crypto_onetimeauth_poly1305_donna_verify(h: ref, in: ref, inlen: i64, k: ref)
  returns ($r: i32)
{
  var $i2: i32;
  var $i4: i32;
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
$bb0:
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  call {:cexpr "h"} boogie_si_record_ref(h);
  call {:cexpr "in"} boogie_si_record_ref(in);
  call {:cexpr "inlen"} boogie_si_record_i64(inlen);
  call {:cexpr "k"} boogie_si_record_ref(k);
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/verify_poly1305_donna.c", 13, 5} true;
  $p1 := $p0;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/verify_poly1305_donna.c", 13, 5} true;
  call $i2 := crypto_onetimeauth_poly1305_donna($p1, in, inlen, k);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/verify_poly1305_donna.c", 14, 12} true;
  $p3 := $p0;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/verify_poly1305_donna.c", 14, 12} true;
  call $i4 := crypto_verify_16(h, $p3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/verify_poly1305_donna.c", 14, 12} true;
  $r := $i4;
  $exn := false;
  return;
}
procedure {:entrypoint} crypto_onetimeauth_poly1305_donna_wrapper(out: ref, m: ref, inlen: i64, key: ref)
  returns ($r: i32)
{
  var $i4: i32;
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  call $initialize();
  call {:cexpr "out"} boogie_si_record_ref(out);
  call {:cexpr "m"} boogie_si_record_ref(m);
  call {:cexpr "inlen"} boogie_si_record_i64(inlen);
  call {:cexpr "key"} boogie_si_record_ref(key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 12, 13} true;
  call {:name out} $p0 := __SMACK_value.ref(out);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 12, 3} true;
  call public_in($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 13, 13} true;
  call {:name m} $p1 := __SMACK_value.ref(m);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 13, 3} true;
  call public_in($p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 14, 13} true;
  call {:name key} $p2 := __SMACK_value.ref(key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 14, 3} true;
  call public_in($p2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 16, 13} true;
  call {:name inlen} $p3 := __SMACK_value.i64(inlen);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 16, 3} true;
  call public_in($p3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 18, 10} true;
  call $i4 := crypto_onetimeauth_poly1305_donna(out, m, inlen, key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/poly1305.c", 18, 10} true;
  $r := $i4;
  $exn := false;
  return;
}
procedure {:inline 1} crypto_verify_16(x: ref, y: ref)
  returns ($r: i32)
{
  var $i1: i8;
  var $i10: i32;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i105: i8;
  var $i106: i32;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i113: i8;
  var $i114: i32;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i12: i8;
  var $i121: i8;
  var $i122: i32;
  var $i124: i8;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i13: i32;
  var $i130: i32;
  var $i131: i32;
  var $i14: i32;
  var $i15: i32;
  var $i17: i8;
  var $i18: i32;
  var $i2: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i25: i8;
  var $i26: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i33: i8;
  var $i34: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i4: i8;
  var $i41: i8;
  var $i42: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i49: i8;
  var $i5: i32;
  var $i50: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i57: i8;
  var $i58: i32;
  var $i6: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i65: i8;
  var $i66: i32;
  var $i68: i8;
  var $i69: i32;
  var $i7: i32;
  var $i70: i32;
  var $i71: i32;
  var $i73: i8;
  var $i74: i32;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i81: i8;
  var $i82: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i89: i8;
  var $i9: i8;
  var $i90: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i97: i8;
  var $i98: i32;
  var $p0: ref;
  var $p104: ref;
  var $p107: ref;
  var $p11: ref;
  var $p112: ref;
  var $p115: ref;
  var $p120: ref;
  var $p123: ref;
  var $p16: ref;
  var $p19: ref;
  var $p24: ref;
  var $p27: ref;
  var $p3: ref;
  var $p32: ref;
  var $p35: ref;
  var $p40: ref;
  var $p43: ref;
  var $p48: ref;
  var $p51: ref;
  var $p56: ref;
  var $p59: ref;
  var $p64: ref;
  var $p67: ref;
  var $p72: ref;
  var $p75: ref;
  var $p8: ref;
  var $p80: ref;
  var $p83: ref;
  var $p88: ref;
  var $p91: ref;
  var $p96: ref;
  var $p99: ref;
$bb0:
  call {:cexpr "x"} boogie_si_record_ref(x);
  call {:cexpr "y"} boogie_si_record_ref(y);
  call {:cexpr "differentbits"} boogie_si_record_i32(0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $p0 := x;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $i1 := $load.i8($M.20, $p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $i2 := $zext.i8.i32($i1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $p3 := y;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $i4 := $load.i8($M.21, $p3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $i5 := $zext.i8.i32($i4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $i6 := $xor.i32($i2, $i5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 7, 3} true;
  $i7 := $or.i32(0, $i6);
  call {:cexpr "differentbits"} boogie_si_record_i32($i7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $p8 := $add.ref(x, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $i9 := $load.i8($M.22, $p8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $i10 := $zext.i8.i32($i9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $p11 := $add.ref(y, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $i12 := $load.i8($M.23, $p11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $i13 := $zext.i8.i32($i12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $i14 := $xor.i32($i10, $i13);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 8, 3} true;
  $i15 := $or.i32($i7, $i14);
  call {:cexpr "differentbits"} boogie_si_record_i32($i15);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $p16 := $add.ref(x, 2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $i17 := $load.i8($M.24, $p16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $i18 := $zext.i8.i32($i17);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $p19 := $add.ref(y, 2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $i20 := $load.i8($M.25, $p19);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $i21 := $zext.i8.i32($i20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $i22 := $xor.i32($i18, $i21);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 9, 3} true;
  $i23 := $or.i32($i15, $i22);
  call {:cexpr "differentbits"} boogie_si_record_i32($i23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $p24 := $add.ref(x, 3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $i25 := $load.i8($M.26, $p24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $i26 := $zext.i8.i32($i25);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $p27 := $add.ref(y, 3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $i28 := $load.i8($M.27, $p27);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $i29 := $zext.i8.i32($i28);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $i30 := $xor.i32($i26, $i29);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 10, 3} true;
  $i31 := $or.i32($i23, $i30);
  call {:cexpr "differentbits"} boogie_si_record_i32($i31);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $p32 := $add.ref(x, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $i33 := $load.i8($M.28, $p32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $i34 := $zext.i8.i32($i33);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $p35 := $add.ref(y, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $i36 := $load.i8($M.29, $p35);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $i37 := $zext.i8.i32($i36);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $i38 := $xor.i32($i34, $i37);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 11, 3} true;
  $i39 := $or.i32($i31, $i38);
  call {:cexpr "differentbits"} boogie_si_record_i32($i39);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $p40 := $add.ref(x, 5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $i41 := $load.i8($M.30, $p40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $i42 := $zext.i8.i32($i41);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $p43 := $add.ref(y, 5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $i44 := $load.i8($M.31, $p43);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $i45 := $zext.i8.i32($i44);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $i46 := $xor.i32($i42, $i45);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 12, 3} true;
  $i47 := $or.i32($i39, $i46);
  call {:cexpr "differentbits"} boogie_si_record_i32($i47);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $p48 := $add.ref(x, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $i49 := $load.i8($M.32, $p48);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $i50 := $zext.i8.i32($i49);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $p51 := $add.ref(y, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $i52 := $load.i8($M.33, $p51);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $i53 := $zext.i8.i32($i52);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $i54 := $xor.i32($i50, $i53);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 13, 3} true;
  $i55 := $or.i32($i47, $i54);
  call {:cexpr "differentbits"} boogie_si_record_i32($i55);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $p56 := $add.ref(x, 7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $i57 := $load.i8($M.34, $p56);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $i58 := $zext.i8.i32($i57);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $p59 := $add.ref(y, 7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $i60 := $load.i8($M.35, $p59);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $i61 := $zext.i8.i32($i60);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $i62 := $xor.i32($i58, $i61);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 14, 3} true;
  $i63 := $or.i32($i55, $i62);
  call {:cexpr "differentbits"} boogie_si_record_i32($i63);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $p64 := $add.ref(x, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $i65 := $load.i8($M.36, $p64);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $i66 := $zext.i8.i32($i65);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $p67 := $add.ref(y, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $i68 := $load.i8($M.37, $p67);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $i69 := $zext.i8.i32($i68);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $i70 := $xor.i32($i66, $i69);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 15, 3} true;
  $i71 := $or.i32($i63, $i70);
  call {:cexpr "differentbits"} boogie_si_record_i32($i71);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $p72 := $add.ref(x, 9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $i73 := $load.i8($M.38, $p72);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $i74 := $zext.i8.i32($i73);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $p75 := $add.ref(y, 9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $i76 := $load.i8($M.39, $p75);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $i77 := $zext.i8.i32($i76);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $i78 := $xor.i32($i74, $i77);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 16, 3} true;
  $i79 := $or.i32($i71, $i78);
  call {:cexpr "differentbits"} boogie_si_record_i32($i79);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $p80 := $add.ref(x, 10);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $i81 := $load.i8($M.40, $p80);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $i82 := $zext.i8.i32($i81);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $p83 := $add.ref(y, 10);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $i84 := $load.i8($M.41, $p83);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $i85 := $zext.i8.i32($i84);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $i86 := $xor.i32($i82, $i85);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 17, 3} true;
  $i87 := $or.i32($i79, $i86);
  call {:cexpr "differentbits"} boogie_si_record_i32($i87);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $p88 := $add.ref(x, 11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $i89 := $load.i8($M.42, $p88);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $i90 := $zext.i8.i32($i89);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $p91 := $add.ref(y, 11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $i92 := $load.i8($M.43, $p91);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $i93 := $zext.i8.i32($i92);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $i94 := $xor.i32($i90, $i93);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 18, 3} true;
  $i95 := $or.i32($i87, $i94);
  call {:cexpr "differentbits"} boogie_si_record_i32($i95);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $p96 := $add.ref(x, 12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $i97 := $load.i8($M.44, $p96);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $i98 := $zext.i8.i32($i97);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $p99 := $add.ref(y, 12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $i100 := $load.i8($M.45, $p99);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $i101 := $zext.i8.i32($i100);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $i102 := $xor.i32($i98, $i101);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 19, 3} true;
  $i103 := $or.i32($i95, $i102);
  call {:cexpr "differentbits"} boogie_si_record_i32($i103);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $p104 := $add.ref(x, 13);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $i105 := $load.i8($M.46, $p104);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $i106 := $zext.i8.i32($i105);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $p107 := $add.ref(y, 13);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $i108 := $load.i8($M.47, $p107);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $i109 := $zext.i8.i32($i108);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $i110 := $xor.i32($i106, $i109);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 20, 3} true;
  $i111 := $or.i32($i103, $i110);
  call {:cexpr "differentbits"} boogie_si_record_i32($i111);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $p112 := $add.ref(x, 14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $i113 := $load.i8($M.48, $p112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $i114 := $zext.i8.i32($i113);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $p115 := $add.ref(y, 14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $i116 := $load.i8($M.49, $p115);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $i117 := $zext.i8.i32($i116);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $i118 := $xor.i32($i114, $i117);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 21, 3} true;
  $i119 := $or.i32($i111, $i118);
  call {:cexpr "differentbits"} boogie_si_record_i32($i119);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $p120 := $add.ref(x, 15);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $i121 := $load.i8($M.50, $p120);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $i122 := $zext.i8.i32($i121);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $p123 := $add.ref(y, 15);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $i124 := $load.i8($M.51, $p123);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $i125 := $zext.i8.i32($i124);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $i126 := $xor.i32($i122, $i125);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 22, 3} true;
  $i127 := $or.i32($i119, $i126);
  call {:cexpr "differentbits"} boogie_si_record_i32($i127);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 23, 3} true;
  $i128 := $sub.i32($i127, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 23, 3} true;
  $i129 := $lshr.i32($i128, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 23, 3} true;
  $i130 := $and.i32(1, $i129);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 23, 3} true;
  $i131 := $sub.i32($i130, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_verify/16/ref/verify_16.c", 23, 3} true;
  $r := $i131;
  $exn := false;
  return;
}
procedure {:inline 1} fcntl.i32.i32($i0: i32, $i1: i32)
  returns ($r: i32);
procedure {:inline 1} fcntl.i32.i32.i32($i0: i32, $i1: i32, p.2: i32)
  returns ($r: i32);
procedure {:inline 1} free_($p0: ref)
{
  call $free($p0);
}
procedure {:inline 1} fstat($i0: i32, $p1: ref)
  returns ($r: i32);
procedure {:inline 1} llvm.dbg.declare($p0: ref, $p1: ref);
procedure {:inline 1} llvm.dbg.value($p0: ref, $i1: i64, $p2: ref);
procedure {:inline 1} llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);
procedure {:inline 1} malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $alloc($i0);
}
procedure {:inline 1} open.ref.i32($p0: ref, $i1: i32)
  returns ($r: i32);
procedure {:inline 1} poly1305_blocks(st: ref, m: ref, bytes: i64)
{
  var $i1: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i11: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i64;
  var $i137: i64;
  var $i14: i64;
  var $i17: i64;
  var $i2: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i27: i64;
  var $i3: i1;
  var $i30: i64;
  var $i33: i64;
  var $i36: i64;
  var $i39: i64;
  var $i4: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i46: i64;
  var $i47: i1;
  var $i49: i64;
  var $i5: i64;
  var $i50: i64;
  var $i51: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i8: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $p0: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p136: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p45: ref;
  var $p48: ref;
  var $p52: ref;
  var $p57: ref;
  var $p6: ref;
  var $p62: ref;
  var $p67: ref;
  var $p7: ref;
  var $p9: ref;
$bb0:
  call {:cexpr "st"} boogie_si_record_ref(st);
  call {:cexpr "m"} boogie_si_record_ref(m);
  call {:cexpr "bytes"} boogie_si_record_i64(bytes);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 76, 9} true;
  $p0 := $add.ref(st, 136);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 76, 9} true;
  $i1 := $load.i8($M.0, $p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 76, 9} true;
  $i2 := $zext.i8.i32($i1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 76, 9} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 76, 9} true;
  havoc $i4;
  assume ((($i3 == 1) ==> ($i4 == 0)) && (($i3 != 1) ==> ($i4 == 16777216)));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 76, 9} true;
  $i5 := $sext.i32.i64($i4);
  call {:cexpr "hibit"} boogie_si_record_i64($i5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 83, 9} true;
  $p6 := st;
  $p7 := st;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 83, 9} true;
  $i8 := $load.i64($M.0, $p7);
  call {:cexpr "r0"} boogie_si_record_i64($i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 84, 9} true;
  $p9 := st;
  $p10 := $add.ref(st, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 84, 9} true;
  $i11 := $load.i64($M.0, $p10);
  call {:cexpr "r1"} boogie_si_record_i64($i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 85, 9} true;
  $p12 := st;
  $p13 := $add.ref(st, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 85, 9} true;
  $i14 := $load.i64($M.0, $p13);
  call {:cexpr "r2"} boogie_si_record_i64($i14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 86, 9} true;
  $p15 := st;
  $p16 := $add.ref(st, 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 86, 9} true;
  $i17 := $load.i64($M.0, $p16);
  call {:cexpr "r3"} boogie_si_record_i64($i17);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 87, 9} true;
  $p18 := st;
  $p19 := $add.ref(st, 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 87, 9} true;
  $i20 := $load.i64($M.0, $p19);
  call {:cexpr "r4"} boogie_si_record_i64($i20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 89, 9} true;
  $i21 := $mul.i64($i11, 5);
  call {:cexpr "s1"} boogie_si_record_i64($i21);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 90, 9} true;
  $i22 := $mul.i64($i14, 5);
  call {:cexpr "s2"} boogie_si_record_i64($i22);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 91, 9} true;
  $i23 := $mul.i64($i17, 5);
  call {:cexpr "s3"} boogie_si_record_i64($i23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 92, 9} true;
  $i24 := $mul.i64($i20, 5);
  call {:cexpr "s4"} boogie_si_record_i64($i24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 94, 9} true;
  $p25 := $add.ref(st, 40);
  $p26 := $add.ref(st, 40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 94, 9} true;
  $i27 := $load.i64($M.0, $p26);
  call {:cexpr "h0"} boogie_si_record_i64($i27);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 95, 9} true;
  $p28 := $add.ref(st, 40);
  $p29 := $add.ref($add.ref(st, 40), 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 95, 9} true;
  $i30 := $load.i64($M.0, $p29);
  call {:cexpr "h1"} boogie_si_record_i64($i30);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 96, 9} true;
  $p31 := $add.ref(st, 40);
  $p32 := $add.ref($add.ref(st, 40), 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 96, 9} true;
  $i33 := $load.i64($M.0, $p32);
  call {:cexpr "h2"} boogie_si_record_i64($i33);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 97, 9} true;
  $p34 := $add.ref(st, 40);
  $p35 := $add.ref($add.ref(st, 40), 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 97, 9} true;
  $i36 := $load.i64($M.0, $p35);
  call {:cexpr "h3"} boogie_si_record_i64($i36);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 98, 9} true;
  $p37 := $add.ref(st, 40);
  $p38 := $add.ref($add.ref(st, 40), 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 98, 9} true;
  $i39 := $load.i64($M.0, $p38);
  call {:cexpr "h4"} boogie_si_record_i64($i39);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 100, 9} true;
  $i40, $i41, $i42, $i43, $i44, $p45, $i46 := $i27, $i30, $i33, $i36, bytes, m, $i39;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 100, 9} true;
  $i47 := $uge.i64($i44, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 100, 9} true;
  assume {:branchcond $i47} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i47 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 102, 24} true;
  $p48 := $p45;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 102, 24} true;
  call $i49 := U8TO32($p48);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 102, 24} true;
  $i50 := $and.i64($i49, 67108863);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 102, 24} true;
  $i51 := $add.i64($i40, $i50);
  call {:cexpr "h0"} boogie_si_record_i64($i51);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 103, 24} true;
  $p52 := $add.ref($p45, 3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 103, 24} true;
  call $i53 := U8TO32($p52);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 103, 24} true;
  $i54 := $lshr.i64($i53, 2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 103, 24} true;
  $i55 := $and.i64($i54, 67108863);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 103, 24} true;
  $i56 := $add.i64($i41, $i55);
  call {:cexpr "h1"} boogie_si_record_i64($i56);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 104, 24} true;
  $p57 := $add.ref($p45, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 104, 24} true;
  call $i58 := U8TO32($p57);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 104, 24} true;
  $i59 := $lshr.i64($i58, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 104, 24} true;
  $i60 := $and.i64($i59, 67108863);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 104, 24} true;
  $i61 := $add.i64($i42, $i60);
  call {:cexpr "h2"} boogie_si_record_i64($i61);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 105, 24} true;
  $p62 := $add.ref($p45, 9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 105, 24} true;
  call $i63 := U8TO32($p62);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 105, 24} true;
  $i64 := $lshr.i64($i63, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 105, 24} true;
  $i65 := $and.i64($i64, 67108863);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 105, 24} true;
  $i66 := $add.i64($i43, $i65);
  call {:cexpr "h3"} boogie_si_record_i64($i66);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 106, 24} true;
  $p67 := $add.ref($p45, 12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 106, 24} true;
  call $i68 := U8TO32($p67);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 106, 24} true;
  $i69 := $lshr.i64($i68, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 106, 24} true;
  $i70 := $or.i64($i69, $i5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 106, 24} true;
  $i71 := $add.i64($i46, $i70);
  call {:cexpr "h4"} boogie_si_record_i64($i71);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i72 := $mul.i64($i51, $i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i73 := $mul.i64($i56, $i24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i74 := $add.i64($i72, $i73);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i75 := $mul.i64($i61, $i23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i76 := $add.i64($i74, $i75);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i77 := $mul.i64($i66, $i22);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i78 := $add.i64($i76, $i77);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i79 := $mul.i64($i71, $i21);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 109, 17} true;
  $i80 := $add.i64($i78, $i79);
  call {:cexpr "d0"} boogie_si_record_i64($i80);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i81 := $mul.i64($i51, $i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i82 := $mul.i64($i56, $i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i83 := $add.i64($i81, $i82);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i84 := $mul.i64($i61, $i24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i85 := $add.i64($i83, $i84);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i86 := $mul.i64($i66, $i23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i87 := $add.i64($i85, $i86);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i88 := $mul.i64($i71, $i22);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 110, 17} true;
  $i89 := $add.i64($i87, $i88);
  call {:cexpr "d1"} boogie_si_record_i64($i89);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i90 := $mul.i64($i51, $i14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i91 := $mul.i64($i56, $i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i92 := $add.i64($i90, $i91);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i93 := $mul.i64($i61, $i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i94 := $add.i64($i92, $i93);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i95 := $mul.i64($i66, $i24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i96 := $add.i64($i94, $i95);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i97 := $mul.i64($i71, $i23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 111, 17} true;
  $i98 := $add.i64($i96, $i97);
  call {:cexpr "d2"} boogie_si_record_i64($i98);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i99 := $mul.i64($i51, $i17);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i100 := $mul.i64($i56, $i14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i101 := $add.i64($i99, $i100);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i102 := $mul.i64($i61, $i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i103 := $add.i64($i101, $i102);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i104 := $mul.i64($i66, $i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i105 := $add.i64($i103, $i104);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i106 := $mul.i64($i71, $i24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 112, 17} true;
  $i107 := $add.i64($i105, $i106);
  call {:cexpr "d3"} boogie_si_record_i64($i107);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i108 := $mul.i64($i51, $i20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i109 := $mul.i64($i56, $i17);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i110 := $add.i64($i108, $i109);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i111 := $mul.i64($i61, $i14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i112 := $add.i64($i110, $i111);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i113 := $mul.i64($i66, $i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i114 := $add.i64($i112, $i113);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i115 := $mul.i64($i71, $i8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 113, 17} true;
  $i116 := $add.i64($i114, $i115);
  call {:cexpr "d4"} boogie_si_record_i64($i116);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 116, 31} true;
  $i117 := $lshr.i64($i80, 26);
  call {:cexpr "c"} boogie_si_record_i64($i117);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 116, 62} true;
  $i118 := $and.i64($i80, 67108863);
  call {:cexpr "h0"} boogie_si_record_i64($i118);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 117, 17} true;
  $i119 := $add.i64($i89, $i117);
  call {:cexpr "d1"} boogie_si_record_i64($i119);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 117, 31} true;
  $i120 := $lshr.i64($i119, 26);
  call {:cexpr "c"} boogie_si_record_i64($i120);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 117, 62} true;
  $i121 := $and.i64($i119, 67108863);
  call {:cexpr "h1"} boogie_si_record_i64($i121);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 118, 17} true;
  $i122 := $add.i64($i98, $i120);
  call {:cexpr "d2"} boogie_si_record_i64($i122);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 118, 31} true;
  $i123 := $lshr.i64($i122, 26);
  call {:cexpr "c"} boogie_si_record_i64($i123);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 118, 62} true;
  $i124 := $and.i64($i122, 67108863);
  call {:cexpr "h2"} boogie_si_record_i64($i124);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 119, 17} true;
  $i125 := $add.i64($i107, $i123);
  call {:cexpr "d3"} boogie_si_record_i64($i125);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 119, 31} true;
  $i126 := $lshr.i64($i125, 26);
  call {:cexpr "c"} boogie_si_record_i64($i126);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 119, 62} true;
  $i127 := $and.i64($i125, 67108863);
  call {:cexpr "h3"} boogie_si_record_i64($i127);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 120, 17} true;
  $i128 := $add.i64($i116, $i126);
  call {:cexpr "d4"} boogie_si_record_i64($i128);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 120, 31} true;
  $i129 := $lshr.i64($i128, 26);
  call {:cexpr "c"} boogie_si_record_i64($i129);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 120, 62} true;
  $i130 := $and.i64($i128, 67108863);
  call {:cexpr "h4"} boogie_si_record_i64($i130);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 121, 17} true;
  $i131 := $mul.i64($i129, 5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 121, 17} true;
  $i132 := $add.i64($i118, $i131);
  call {:cexpr "h0"} boogie_si_record_i64($i132);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 121, 31} true;
  $i133 := $lshr.i64($i132, 26);
  call {:cexpr "c"} boogie_si_record_i64($i133);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 121, 62} true;
  $i134 := $and.i64($i132, 67108863);
  call {:cexpr "h0"} boogie_si_record_i64($i134);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 122, 17} true;
  $i135 := $add.i64($i121, $i133);
  call {:cexpr "h1"} boogie_si_record_i64($i135);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 124, 17} true;
  $p136 := $add.ref($p45, 16);
  call {:cexpr "m"} boogie_si_record_ref($p136);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 125, 17} true;
  $i137 := $sub.i64($i44, 16);
  call {:cexpr "bytes"} boogie_si_record_i64($i137);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 126, 9} true;
  $i40, $i41, $i42, $i43, $i44, $p45, $i46 := $i134, $i135, $i124, $i127, $i137, $p136, $i130;
  goto $bb1;
$bb3:
  assume !(($i47 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 128, 9} true;
  $p138 := $add.ref(st, 40);
  $p139 := $add.ref(st, 40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 128, 9} true;
  $M.0 := $store.i64($M.0, $p139, $i40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 129, 9} true;
  $p140 := $add.ref(st, 40);
  $p141 := $add.ref($add.ref(st, 40), 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 129, 9} true;
  $M.0 := $store.i64($M.0, $p141, $i41);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 130, 9} true;
  $p142 := $add.ref(st, 40);
  $p143 := $add.ref($add.ref(st, 40), 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 130, 9} true;
  $M.0 := $store.i64($M.0, $p143, $i42);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 131, 9} true;
  $p144 := $add.ref(st, 40);
  $p145 := $add.ref($add.ref(st, 40), 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 131, 9} true;
  $M.0 := $store.i64($M.0, $p145, $i43);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 132, 9} true;
  $p146 := $add.ref(st, 40);
  $p147 := $add.ref($add.ref(st, 40), 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 132, 9} true;
  $M.0 := $store.i64($M.0, $p147, $i46);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 133, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} poly1305_finish(ctx: ref, mac: ref)
{
  var $i10: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i108: i64;
  var $i109: i64;
  var $i11: i1;
  var $i110: i64;
  var $i111: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $i14: i64;
  var $i20: i64;
  var $i23: i64;
  var $i26: i64;
  var $i29: i64;
  var $i3: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i4: i1;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i6: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i7: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i98: i64;
  var $i99: i64;
  var $p0: ref;
  var $p1: ref;
  var $p100: ref;
  var $p101: ref;
  var $p106: ref;
  var $p107: ref;
  var $p112: ref;
  var $p113: ref;
  var $p118: ref;
  var $p119: ref;
  var $p12: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p2: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p96: ref;
  var $p97: ref;
$bb0:
  call {:cexpr "ctx"} boogie_si_record_ref(ctx);
  call {:cexpr "mac"} boogie_si_record_ref(mac);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 137, 9} true;
  $p0 := $bitcast.ref.ref(ctx);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 137, 9} true;
  $p1 := $bitcast.ref.ref($p0);
  call {:cexpr "st"} boogie_si_record_ref($p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 144, 13} true;
  $p2 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 144, 13} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 144, 13} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 144, 13} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 145, 17} true;
  $p5 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 145, 17} true;
  $i6 := $load.i64($M.0, $p5);
  call {:cexpr "i"} boogie_si_record_i64($i6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 146, 17} true;
  $i7 := $add.i64($i6, 1);
  call {:cexpr "i"} boogie_si_record_i64($i7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 146, 17} true;
  $p8 := $add.ref($p1, 120);
  $p9 := $add.ref($add.ref($p1, 120), $mul.ref($i6, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 146, 17} true;
  $M.0 := $store.i8($M.0, $p9, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 147, 17} true;
  $i10 := $i7;
  goto $bb4;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 144, 13} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 154, 9} true;
  $p18 := $add.ref($p1, 40);
  $p19 := $add.ref($p1, 40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 154, 9} true;
  $i20 := $load.i64($M.0, $p19);
  call {:cexpr "h0"} boogie_si_record_i64($i20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 155, 9} true;
  $p21 := $add.ref($p1, 40);
  $p22 := $add.ref($add.ref($p1, 40), 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 155, 9} true;
  $i23 := $load.i64($M.0, $p22);
  call {:cexpr "h1"} boogie_si_record_i64($i23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 156, 9} true;
  $p24 := $add.ref($p1, 40);
  $p25 := $add.ref($add.ref($p1, 40), 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 156, 9} true;
  $i26 := $load.i64($M.0, $p25);
  call {:cexpr "h2"} boogie_si_record_i64($i26);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 157, 9} true;
  $p27 := $add.ref($p1, 40);
  $p28 := $add.ref($add.ref($p1, 40), 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 157, 9} true;
  $i29 := $load.i64($M.0, $p28);
  call {:cexpr "h3"} boogie_si_record_i64($i29);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 158, 9} true;
  $p30 := $add.ref($p1, 40);
  $p31 := $add.ref($add.ref($p1, 40), 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 158, 9} true;
  $i32 := $load.i64($M.0, $p31);
  call {:cexpr "h4"} boogie_si_record_i64($i32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 160, 22} true;
  $i33 := $lshr.i64($i23, 26);
  call {:cexpr "c"} boogie_si_record_i64($i33);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 160, 36} true;
  $i34 := $and.i64($i23, 67108863);
  call {:cexpr "h1"} boogie_si_record_i64($i34);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 161, 9} true;
  $i35 := $add.i64($i26, $i33);
  call {:cexpr "h2"} boogie_si_record_i64($i35);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 161, 22} true;
  $i36 := $lshr.i64($i35, 26);
  call {:cexpr "c"} boogie_si_record_i64($i36);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 161, 36} true;
  $i37 := $and.i64($i35, 67108863);
  call {:cexpr "h2"} boogie_si_record_i64($i37);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 162, 9} true;
  $i38 := $add.i64($i29, $i36);
  call {:cexpr "h3"} boogie_si_record_i64($i38);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 162, 22} true;
  $i39 := $lshr.i64($i38, 26);
  call {:cexpr "c"} boogie_si_record_i64($i39);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 162, 36} true;
  $i40 := $and.i64($i38, 67108863);
  call {:cexpr "h3"} boogie_si_record_i64($i40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 163, 9} true;
  $i41 := $add.i64($i32, $i39);
  call {:cexpr "h4"} boogie_si_record_i64($i41);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 163, 22} true;
  $i42 := $lshr.i64($i41, 26);
  call {:cexpr "c"} boogie_si_record_i64($i42);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 163, 36} true;
  $i43 := $and.i64($i41, 67108863);
  call {:cexpr "h4"} boogie_si_record_i64($i43);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 164, 9} true;
  $i44 := $mul.i64($i42, 5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 164, 9} true;
  $i45 := $add.i64($i20, $i44);
  call {:cexpr "h0"} boogie_si_record_i64($i45);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 164, 22} true;
  $i46 := $lshr.i64($i45, 26);
  call {:cexpr "c"} boogie_si_record_i64($i46);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 164, 36} true;
  $i47 := $and.i64($i45, 67108863);
  call {:cexpr "h0"} boogie_si_record_i64($i47);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 165, 9} true;
  $i48 := $add.i64($i34, $i46);
  call {:cexpr "h1"} boogie_si_record_i64($i48);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 168, 9} true;
  $i49 := $add.i64($i47, 5);
  call {:cexpr "g0"} boogie_si_record_i64($i49);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 168, 22} true;
  $i50 := $lshr.i64($i49, 26);
  call {:cexpr "c"} boogie_si_record_i64($i50);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 168, 36} true;
  $i51 := $and.i64($i49, 67108863);
  call {:cexpr "g0"} boogie_si_record_i64($i51);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 169, 9} true;
  $i52 := $add.i64($i48, $i50);
  call {:cexpr "g1"} boogie_si_record_i64($i52);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 169, 22} true;
  $i53 := $lshr.i64($i52, 26);
  call {:cexpr "c"} boogie_si_record_i64($i53);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 169, 36} true;
  $i54 := $and.i64($i52, 67108863);
  call {:cexpr "g1"} boogie_si_record_i64($i54);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 170, 9} true;
  $i55 := $add.i64($i37, $i53);
  call {:cexpr "g2"} boogie_si_record_i64($i55);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 170, 22} true;
  $i56 := $lshr.i64($i55, 26);
  call {:cexpr "c"} boogie_si_record_i64($i56);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 170, 36} true;
  $i57 := $and.i64($i55, 67108863);
  call {:cexpr "g2"} boogie_si_record_i64($i57);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 171, 9} true;
  $i58 := $add.i64($i40, $i56);
  call {:cexpr "g3"} boogie_si_record_i64($i58);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 171, 22} true;
  $i59 := $lshr.i64($i58, 26);
  call {:cexpr "c"} boogie_si_record_i64($i59);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 171, 36} true;
  $i60 := $and.i64($i58, 67108863);
  call {:cexpr "g3"} boogie_si_record_i64($i60);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 172, 9} true;
  $i61 := $add.i64($i43, $i59);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 172, 9} true;
  $i62 := $sub.i64($i61, 67108864);
  call {:cexpr "g4"} boogie_si_record_i64($i62);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 175, 9} true;
  $i63 := $lshr.i64($i62, 63);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 175, 9} true;
  $i64 := $sub.i64($i63, 1);
  call {:cexpr "mask"} boogie_si_record_i64($i64);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 176, 9} true;
  $i65 := $and.i64($i51, $i64);
  call {:cexpr "g0"} boogie_si_record_i64($i65);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 177, 9} true;
  $i66 := $and.i64($i54, $i64);
  call {:cexpr "g1"} boogie_si_record_i64($i66);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 178, 9} true;
  $i67 := $and.i64($i57, $i64);
  call {:cexpr "g2"} boogie_si_record_i64($i67);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 179, 9} true;
  $i68 := $and.i64($i60, $i64);
  call {:cexpr "g3"} boogie_si_record_i64($i68);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 180, 9} true;
  $i69 := $and.i64($i62, $i64);
  call {:cexpr "g4"} boogie_si_record_i64($i69);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 181, 9} true;
  $i70 := $xor.i64($i64, $sub.i64(0, 1));
  call {:cexpr "mask"} boogie_si_record_i64($i70);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 182, 9} true;
  $i71 := $and.i64($i47, $i70);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 182, 9} true;
  $i72 := $or.i64($i71, $i65);
  call {:cexpr "h0"} boogie_si_record_i64($i72);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 183, 9} true;
  $i73 := $and.i64($i48, $i70);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 183, 9} true;
  $i74 := $or.i64($i73, $i66);
  call {:cexpr "h1"} boogie_si_record_i64($i74);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 184, 9} true;
  $i75 := $and.i64($i37, $i70);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 184, 9} true;
  $i76 := $or.i64($i75, $i67);
  call {:cexpr "h2"} boogie_si_record_i64($i76);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 185, 9} true;
  $i77 := $and.i64($i40, $i70);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 185, 9} true;
  $i78 := $or.i64($i77, $i68);
  call {:cexpr "h3"} boogie_si_record_i64($i78);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 186, 9} true;
  $i79 := $and.i64($i43, $i70);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 186, 9} true;
  $i80 := $or.i64($i79, $i69);
  call {:cexpr "h4"} boogie_si_record_i64($i80);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 189, 9} true;
  $i81 := $shl.i64($i74, 26);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 189, 9} true;
  $i82 := $or.i64($i72, $i81);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 189, 9} true;
  $i83 := $and.i64($i82, 4294967295);
  call {:cexpr "h0"} boogie_si_record_i64($i83);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 190, 9} true;
  $i84 := $lshr.i64($i74, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 190, 9} true;
  $i85 := $shl.i64($i76, 20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 190, 9} true;
  $i86 := $or.i64($i84, $i85);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 190, 9} true;
  $i87 := $and.i64($i86, 4294967295);
  call {:cexpr "h1"} boogie_si_record_i64($i87);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 191, 9} true;
  $i88 := $lshr.i64($i76, 12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 191, 9} true;
  $i89 := $shl.i64($i78, 14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 191, 9} true;
  $i90 := $or.i64($i88, $i89);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 191, 9} true;
  $i91 := $and.i64($i90, 4294967295);
  call {:cexpr "h2"} boogie_si_record_i64($i91);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 192, 9} true;
  $i92 := $lshr.i64($i78, 18);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 192, 9} true;
  $i93 := $shl.i64($i80, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 192, 9} true;
  $i94 := $or.i64($i92, $i93);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 192, 9} true;
  $i95 := $and.i64($i94, 4294967295);
  call {:cexpr "h3"} boogie_si_record_i64($i95);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 195, 9} true;
  $p96 := $add.ref($p1, 80);
  $p97 := $add.ref($p1, 80);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 195, 9} true;
  $i98 := $load.i64($M.0, $p97);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 195, 9} true;
  $i99 := $add.i64($i83, $i98);
  call {:cexpr "f"} boogie_si_record_i64($i99);
  call {:cexpr "h0"} boogie_si_record_i64($i99);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 196, 9} true;
  $p100 := $add.ref($p1, 80);
  $p101 := $add.ref($add.ref($p1, 80), 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 196, 9} true;
  $i102 := $load.i64($M.0, $p101);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 196, 9} true;
  $i103 := $add.i64($i87, $i102);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 196, 9} true;
  $i104 := $lshr.i64($i99, 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 196, 9} true;
  $i105 := $add.i64($i103, $i104);
  call {:cexpr "f"} boogie_si_record_i64($i105);
  call {:cexpr "h1"} boogie_si_record_i64($i105);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 197, 9} true;
  $p106 := $add.ref($p1, 80);
  $p107 := $add.ref($add.ref($p1, 80), 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 197, 9} true;
  $i108 := $load.i64($M.0, $p107);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 197, 9} true;
  $i109 := $add.i64($i91, $i108);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 197, 9} true;
  $i110 := $lshr.i64($i105, 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 197, 9} true;
  $i111 := $add.i64($i109, $i110);
  call {:cexpr "f"} boogie_si_record_i64($i111);
  call {:cexpr "h2"} boogie_si_record_i64($i111);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 198, 9} true;
  $p112 := $add.ref($p1, 80);
  $p113 := $add.ref($add.ref($p1, 80), 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 198, 9} true;
  $i114 := $load.i64($M.0, $p113);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 198, 9} true;
  $i115 := $add.i64($i95, $i114);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 198, 9} true;
  $i116 := $lshr.i64($i111, 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 198, 9} true;
  $i117 := $add.i64($i115, $i116);
  call {:cexpr "f"} boogie_si_record_i64($i117);
  call {:cexpr "h3"} boogie_si_record_i64($i117);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 200, 9} true;
  $p118 := mac;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 200, 9} true;
  call U32TO8($p118, $i99);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 201, 9} true;
  $p119 := $add.ref(mac, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 201, 9} true;
  call U32TO8($p119, $i105);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 202, 9} true;
  $p120 := $add.ref(mac, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 202, 9} true;
  call U32TO8($p120, $i111);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 203, 9} true;
  $p121 := $add.ref(mac, 12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 203, 9} true;
  call U32TO8($p121, $i117);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 206, 9} true;
  $p122 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 206, 9} true;
  call sodium_memzero($p122, 144);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 207, 1} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 147, 17} true;
  $i11 := $ult.i64($i10, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 147, 17} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 148, 25} true;
  $p12 := $add.ref($p1, 120);
  $p13 := $add.ref($add.ref($p1, 120), $mul.ref($i10, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 148, 25} true;
  $M.0 := $store.i8($M.0, $p13, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 147, 49} true;
  $i14 := $add.i64($i10, 1);
  call {:cexpr "i"} boogie_si_record_i64($i14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 147, 49} true;
  $i10 := $i14;
  goto $bb4;
$bb6:
  assume !(($i11 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 149, 17} true;
  $p15 := $add.ref($p1, 136);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 149, 17} true;
  $M.0 := $store.i8($M.0, $p15, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 150, 17} true;
  $p16 := $add.ref($p1, 120);
  $p17 := $add.ref($p1, 120);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 150, 17} true;
  call poly1305_blocks($p1, $p17, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 151, 9} true;
  goto $bb3;
}
procedure {:inline 1} poly1305_init(ctx: ref, key: ref)
{
  var $i10: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i3: i64;
  var $i4: i64;
  var $i42: i64;
  var $i46: i64;
  var $i50: i64;
  var $i54: i64;
  var $i8: i64;
  var $i9: i64;
  var $p0: ref;
  var $p1: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p2: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p5: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  call {:cexpr "ctx"} boogie_si_record_ref(ctx);
  call {:cexpr "key"} boogie_si_record_ref(key);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 48, 9} true;
  $p0 := $bitcast.ref.ref(ctx);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 48, 9} true;
  $p1 := $bitcast.ref.ref($p0);
  call {:cexpr "st"} boogie_si_record_ref($p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 51, 21} true;
  $p2 := key;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 51, 21} true;
  call $i3 := U8TO32($p2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 51, 21} true;
  $i4 := $and.i64($i3, 67108863);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 51, 21} true;
  $p5 := $p1;
  $p6 := $p1;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 51, 21} true;
  $M.0 := $store.i64($M.0, $p6, $i4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 52, 21} true;
  $p7 := $add.ref(key, 3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 52, 21} true;
  call $i8 := U8TO32($p7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 52, 21} true;
  $i9 := $lshr.i64($i8, 2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 52, 21} true;
  $i10 := $and.i64($i9, 67108611);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 52, 21} true;
  $p11 := $p1;
  $p12 := $add.ref($p1, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 52, 21} true;
  $M.0 := $store.i64($M.0, $p12, $i10);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 53, 21} true;
  $p13 := $add.ref(key, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 53, 21} true;
  call $i14 := U8TO32($p13);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 53, 21} true;
  $i15 := $lshr.i64($i14, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 53, 21} true;
  $i16 := $and.i64($i15, 67092735);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 53, 21} true;
  $p17 := $p1;
  $p18 := $add.ref($p1, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 53, 21} true;
  $M.0 := $store.i64($M.0, $p18, $i16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 54, 21} true;
  $p19 := $add.ref(key, 9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 54, 21} true;
  call $i20 := U8TO32($p19);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 54, 21} true;
  $i21 := $lshr.i64($i20, 6);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 54, 21} true;
  $i22 := $and.i64($i21, 66076671);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 54, 21} true;
  $p23 := $p1;
  $p24 := $add.ref($p1, 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 54, 21} true;
  $M.0 := $store.i64($M.0, $p24, $i22);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 55, 21} true;
  $p25 := $add.ref(key, 12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 55, 21} true;
  call $i26 := U8TO32($p25);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 55, 21} true;
  $i27 := $lshr.i64($i26, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 55, 21} true;
  $i28 := $and.i64($i27, 1048575);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 55, 21} true;
  $p29 := $p1;
  $p30 := $add.ref($p1, 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 55, 21} true;
  $M.0 := $store.i64($M.0, $p30, $i28);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 58, 9} true;
  $p31 := $add.ref($p1, 40);
  $p32 := $add.ref($p1, 40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 58, 9} true;
  $M.0 := $store.i64($M.0, $p32, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 59, 9} true;
  $p33 := $add.ref($p1, 40);
  $p34 := $add.ref($add.ref($p1, 40), 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 59, 9} true;
  $M.0 := $store.i64($M.0, $p34, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 60, 9} true;
  $p35 := $add.ref($p1, 40);
  $p36 := $add.ref($add.ref($p1, 40), 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 60, 9} true;
  $M.0 := $store.i64($M.0, $p36, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 61, 9} true;
  $p37 := $add.ref($p1, 40);
  $p38 := $add.ref($add.ref($p1, 40), 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 61, 9} true;
  $M.0 := $store.i64($M.0, $p38, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 62, 9} true;
  $p39 := $add.ref($p1, 40);
  $p40 := $add.ref($add.ref($p1, 40), 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 62, 9} true;
  $M.0 := $store.i64($M.0, $p40, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 65, 22} true;
  $p41 := $add.ref(key, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 65, 22} true;
  call $i42 := U8TO32($p41);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 65, 22} true;
  $p43 := $add.ref($p1, 80);
  $p44 := $add.ref($p1, 80);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 65, 22} true;
  $M.0 := $store.i64($M.0, $p44, $i42);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 66, 22} true;
  $p45 := $add.ref(key, 20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 66, 22} true;
  call $i46 := U8TO32($p45);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 66, 22} true;
  $p47 := $add.ref($p1, 80);
  $p48 := $add.ref($add.ref($p1, 80), 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 66, 22} true;
  $M.0 := $store.i64($M.0, $p48, $i46);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 67, 22} true;
  $p49 := $add.ref(key, 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 67, 22} true;
  call $i50 := U8TO32($p49);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 67, 22} true;
  $p51 := $add.ref($p1, 80);
  $p52 := $add.ref($add.ref($p1, 80), 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 67, 22} true;
  $M.0 := $store.i64($M.0, $p52, $i50);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 68, 22} true;
  $p53 := $add.ref(key, 28);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 68, 22} true;
  call $i54 := U8TO32($p53);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 68, 22} true;
  $p55 := $add.ref($p1, 80);
  $p56 := $add.ref($add.ref($p1, 80), 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 68, 22} true;
  $M.0 := $store.i64($M.0, $p56, $i54);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 70, 9} true;
  $p57 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 70, 9} true;
  $M.0 := $store.i64($M.0, $p57, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 71, 9} true;
  $p58 := $add.ref($p1, 136);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 71, 9} true;
  $M.0 := $store.i8($M.0, $p58, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h", 72, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} poly1305_update(ctx: ref, m: ref, bytes: i64)
{
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i15: i8;
  var $i17: i64;
  var $i18: i64;
  var $i21: i64;
  var $i22: i64;
  var $i25: i64;
  var $i26: i64;
  var $i28: i64;
  var $i29: i1;
  var $i3: i64;
  var $i33: i1;
  var $i34: i64;
  var $i36: i64;
  var $i38: i64;
  var $i39: i1;
  var $i4: i1;
  var $i40: i64;
  var $i41: i1;
  var $i43: i8;
  var $i45: i64;
  var $i46: i64;
  var $i49: i64;
  var $i5: i64;
  var $i51: i64;
  var $i52: i64;
  var $i8: i64;
  var $i9: i64;
  var $p0: ref;
  var $p1: ref;
  var $p14: ref;
  var $p16: ref;
  var $p19: ref;
  var $p2: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p37: ref;
  var $p42: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  call {:cexpr "ctx"} boogie_si_record_ref(ctx);
  call {:cexpr "m"} boogie_si_record_ref(m);
  call {:cexpr "bytes"} boogie_si_record_i64(bytes);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 13, 5} true;
  $p0 := $bitcast.ref.ref(ctx);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 13, 5} true;
  $p1 := $bitcast.ref.ref($p0);
  call {:cexpr "st"} boogie_si_record_ref($p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 17, 9} true;
  $p2 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 17, 9} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 17, 9} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 17, 9} true;
  $i5, $p6 := bytes, m;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 18, 9} true;
  $p7 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 18, 9} true;
  $i8 := $load.i64($M.0, $p7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 18, 9} true;
  $i9 := $sub.i64(16, $i8);
  call {:cexpr "want"} boogie_si_record_i64($i9);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 19, 13} true;
  $i10 := $ugt.i64($i9, bytes);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 19, 13} true;
  $i11 := $i9;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 17, 9} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 33, 9} true;
  $i33 := $uge.i64($i5, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 33, 9} true;
  $i34, $p35 := $i5, $p6;
  assume {:branchcond $i33} true;
  goto $bb13, $bb14;
$bb4:
  assume ($i10 == 1);
  call {:cexpr "want"} boogie_si_record_i64(bytes);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 20, 13} true;
  $i11 := bytes;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 19, 13} true;
  assume !(($i10 == 1));
  goto $bb6;
$bb6:
  call {:cexpr "i"} boogie_si_record_i64(0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 21, 14} true;
  $i12 := 0;
  goto $bb7;
$bb7:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 21, 14} true;
  $i13 := $ult.i64($i12, $i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 21, 14} true;
  assume {:branchcond $i13} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i13 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $p14 := $add.ref(m, $mul.ref($i12, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $i15 := $load.i8($M.0, $p14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $p16 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $i17 := $load.i64($M.0, $p16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $i18 := $add.i64($i17, $i12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $p19 := $add.ref($p1, 120);
  $p20 := $add.ref($add.ref($p1, 120), $mul.ref($i18, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 22, 13} true;
  $M.0 := $store.i8($M.0, $p20, $i15);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 21, 31} true;
  $i21 := $add.i64($i12, 1);
  call {:cexpr "i"} boogie_si_record_i64($i21);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 21, 31} true;
  $i12 := $i21;
  goto $bb7;
$bb9:
  assume !(($i13 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 23, 9} true;
  $i22 := $sub.i64(bytes, $i11);
  call {:cexpr "bytes"} boogie_si_record_i64($i22);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 24, 9} true;
  $p23 := $add.ref(m, $mul.ref($i11, 1));
  call {:cexpr "m"} boogie_si_record_ref($p23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 25, 9} true;
  $p24 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 25, 9} true;
  $i25 := $load.i64($M.0, $p24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 25, 9} true;
  $i26 := $add.i64($i25, $i11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 25, 9} true;
  $M.0 := $store.i64($M.0, $p24, $i26);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 26, 13} true;
  $p27 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 26, 13} true;
  $i28 := $load.i64($M.0, $p27);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 26, 13} true;
  $i29 := $ult.i64($i28, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 26, 13} true;
  assume {:branchcond $i29} true;
  goto $bb10, $bb12;
$bb10:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 26, 13} true;
  assume ($i29 == 1);
  goto $bb11;
$bb11:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 46, 1} true;
  $exn := false;
  return;
$bb12:
  assume !(($i29 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 28, 9} true;
  $p30 := $add.ref($p1, 120);
  $p31 := $add.ref($p1, 120);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 28, 9} true;
  call poly1305_blocks($p1, $p31, 16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 29, 9} true;
  $p32 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 29, 9} true;
  $M.0 := $store.i64($M.0, $p32, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 30, 5} true;
  $i5, $p6 := $i22, $p23;
  goto $bb3;
$bb13:
  assume ($i33 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 34, 9} true;
  $i36 := $and.i64($i5, $sub.i64(0, 16));
  call {:cexpr "want"} boogie_si_record_i64($i36);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 35, 9} true;
  call poly1305_blocks($p1, $p6, $i36);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 36, 9} true;
  $p37 := $add.ref($p6, $mul.ref($i36, 1));
  call {:cexpr "m"} boogie_si_record_ref($p37);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 37, 9} true;
  $i38 := $sub.i64($i5, $i36);
  call {:cexpr "bytes"} boogie_si_record_i64($i38);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 38, 5} true;
  $i34, $p35 := $i38, $p37;
  goto $bb15;
$bb14:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 33, 9} true;
  assume !(($i33 == 1));
  goto $bb15;
$bb15:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 41, 9} true;
  $i39 := $ne.i64($i34, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 41, 9} true;
  assume {:branchcond $i39} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i39 == 1);
  call {:cexpr "i"} boogie_si_record_i64(0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 42, 14} true;
  $i40 := 0;
  goto $bb18;
$bb17:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 41, 9} true;
  assume !(($i39 == 1));
  goto $bb11;
$bb18:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 42, 14} true;
  $i41 := $ult.i64($i40, $i34);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 42, 14} true;
  assume {:branchcond $i41} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i41 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $p42 := $add.ref($p35, $mul.ref($i40, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $i43 := $load.i8($M.0, $p42);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $p44 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $i45 := $load.i64($M.0, $p44);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $i46 := $add.i64($i45, $i40);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $p47 := $add.ref($p1, 120);
  $p48 := $add.ref($add.ref($p1, 120), $mul.ref($i46, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 43, 13} true;
  $M.0 := $store.i8($M.0, $p48, $i43);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 42, 32} true;
  $i49 := $add.i64($i40, 1);
  call {:cexpr "i"} boogie_si_record_i64($i49);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 42, 32} true;
  $i40 := $i49;
  goto $bb18;
$bb20:
  assume !(($i41 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 44, 9} true;
  $p50 := $add.ref($p1, 112);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 44, 9} true;
  $i51 := $load.i64($M.0, $p50);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 44, 9} true;
  $i52 := $add.i64($i51, $i34);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 44, 9} true;
  $M.0 := $store.i64($M.0, $p50, $i52);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/crypto_onetimeauth/poly1305/donna/auth_poly1305_donna.c", 45, 5} true;
  goto $bb11;
}
procedure {:inline 1} public_in($p0: ref);
procedure {:inline 1} randombytes_buf(buf: ref, size: i64)
{
  var $i0: i1;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  call {:cexpr "buf"} boogie_si_record_ref(buf);
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 117, 9} true;
  $i0 := $ugt.i64(size, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 117, 9} true;
  assume {:branchcond $i0} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i0 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 118, 9} true;
  $p1 := $load.ref($M.17, implementation_);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 118, 9} true;
  $p2 := $add.ref($p1, 32);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 118, 9} true;
  $p3 := $load.ref($M.19, $p2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 118, 9} true;
  call randombytes_sysrandom_buf(buf, size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 119, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 117, 9} true;
  assume !(($i0 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 128, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} randombytes_random()
  returns ($r: i32)
{
  var $i3: i32;
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 44, 12} true;
  $p0 := $load.ref($M.17, implementation_);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 44, 12} true;
  $p1 := $add.ref($p0, 8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 44, 12} true;
  $p2 := $load.ref($M.18, $p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 44, 12} true;
  assume {:branchcond $p2} true;
  goto $bb2, $bb3;
$bb1:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/randombytes.c", 44, 12} true;
  $r := $i3;
  $exn := false;
  return;
$bb2:
  assume ($p2 == randombytes_sysrandom_close);
  call $i3 := randombytes_sysrandom_close();
  goto $bb1;
$bb3:
  assume ($p2 == randombytes_sysrandom);
  call $i3 := randombytes_sysrandom();
  goto $bb1;
}
procedure {:inline 1} randombytes_sysrandom()
  returns ($r: i32)
{
  var $i2: i32;
  var $p0: ref;
  var $p1: ref;
$bb0:
  call $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 253, 5} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 253, 5} true;
  call randombytes_sysrandom_buf($p1, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 255, 5} true;
  $i2 := $load.i32($M.8, $p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 255, 5} true;
  $r := $i2;
  $exn := false;
  return;
}
procedure {:inline 1} randombytes_sysrandom_buf(buf: ref, size: i64)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
$bb0:
  call {:cexpr "buf"} boogie_si_record_ref(buf);
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 261, 5} true;
  call randombytes_sysrandom_stir_if_needed();
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 275, 9} true;
  $i0 := $M.7;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 275, 9} true;
  $i1 := $eq.i32($i0, $sub.i32(0, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 275, 9} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 275, 9} true;
  assume ($i1 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 277, 9} true;
  call abort();
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 277, 9} true;
  assume false;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 276, 9} true;
  $i2 := $M.7;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 276, 9} true;
  call $i3 := safe_read($i2, buf, size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 276, 9} true;
  $i4 := $ne.i64($i3, size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 276, 9} true;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 276, 9} true;
  assume ($i4 == 1);
  goto $bb2;
$bb5:
  assume !(($i4 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 287, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} randombytes_sysrandom_close()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
$bb0:
  call {:cexpr "ret"} boogie_si_record_i32($sub.i32(0, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 228, 9} true;
  $i0 := $M.7;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 228, 9} true;
  $i1 := $ne.i32($i0, $sub.i32(0, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 228, 9} true;
  $i2 := $sub.i32(0, 1);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 229, 9} true;
  $i3 := $M.7;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 229, 9} true;
  call $i4 := close($i3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 229, 9} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 229, 9} true;
  $i2 := $sub.i32(0, 1);
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 228, 9} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 245, 5} true;
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 230, 9} true;
  $M.7 := $sub.i32(0, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 231, 9} true;
  $M.6 := 0;
  call {:cexpr "ret"} boogie_si_record_i32(0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 233, 5} true;
  $i2 := 0;
  goto $bb3;
$bb5:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 229, 9} true;
  assume !(($i5 == 1));
  goto $bb3;
}
procedure {:inline 1} randombytes_sysrandom_implementation_name()
  returns ($r: ref)
{
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 294, 5} true;
  $r := .str990;
  $exn := false;
  return;
}
procedure {:inline 1} randombytes_sysrandom_init()
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p0: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 175, 32} true;
  call $p0 := __errno_location();
  assume $isExternal($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 175, 32} true;
  $i1 := $load.i32($M.9, $p0);
  call {:cexpr "errno_save"} boogie_si_record_i32($i1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 191, 10} true;
  call $i2 := randombytes_sysrandom_random_dev_open();
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 191, 10} true;
  $M.7 := $i2;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 191, 10} true;
  $i3 := $eq.i32($i2, $sub.i32(0, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 191, 10} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 192, 9} true;
  call abort();
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 192, 9} true;
  assume false;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 194, 5} true;
  call $p4 := __errno_location();
  assume $isExternal($p4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 194, 5} true;
  $M.10 := $store.i32($M.10, $p4, $i1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 195, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} randombytes_sysrandom_random_dev_open()
  returns ($r: i32)
{
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $i22: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $p0: ref;
  var $p1: ref;
  var $p16: ref;
  var $p19: ref;
  var $p2: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p7: ref;
$bb0:
  call $p0 := $alloc($mul.ref(144, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  call {:cexpr "device"} boogie_si_record_ref(randombytes_sysrandom_random_dev_open.devices);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 115, 5} true;
  $p1 := randombytes_sysrandom_random_dev_open.devices;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 116, 14} true;
  $p2 := $load.ref($M.13, $p1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 116, 14} true;
  call $i3 := open.ref.i32($p2, 0);
  call {:cexpr "fd"} boogie_si_record_i32($i3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 117, 13} true;
  $i4 := $ne.i32($i3, $sub.i32(0, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 117, 13} true;
  assume {:branchcond $i4} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i4 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  call $i5 := fstat($i3, $p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  $i6 := $eq.i32($i5, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i4 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 20} true;
  call $p16 := __errno_location();
  assume $isExternal($p16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 20} true;
  $i17 := $load.i32($M.15, $p16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 20} true;
  $i18 := $eq.i32($i17, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 20} true;
  $p19 := $p1;
  assume {:branchcond $i18} true;
  goto $bb11, $bb13;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  $p7 := $add.ref($p0, 24);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  $i8 := $load.i32($M.14, $p7);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  $i9 := $and.i32($i8, 61440);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  $i10 := $eq.i32($i9, 8192);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  assume {:branchcond $i10} true;
  goto $bb7, $bb8;
$bb5:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  assume !(($i6 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 124, 20} true;
  call $i15 := close($i3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 9} true;
  goto $bb10;
$bb7:
  assume ($i10 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 120, 43} true;
  call $i11 := fcntl.i32.i32($i3, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 120, 43} true;
  $i12 := $or.i32($i11, 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 120, 24} true;
  call $i13 := fcntl.i32.i32.i32($i3, 2, $i12);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 122, 17} true;
  $i14 := $i3;
  goto $bb9;
$bb8:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 118, 17} true;
  assume !(($i10 == 1));
  goto $bb6;
$bb9:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 134, 1} true;
  $r := $i14;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 128, 9} true;
  $p20 := $add.ref($p1, 8);
  call {:cexpr "device"} boogie_si_record_ref($p20);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 129, 5} true;
  $p19 := $p20;
  goto $bb12;
$bb11:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 20} true;
  assume ($i18 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 129, 5} true;
  $p21 := $load.ref($M.13, $p19);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 129, 5} true;
  $i22 := $ne.ref($p21, $0.ref);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 129, 5} true;
  $p1 := $p19;
  assume {:branchcond $i22} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 125, 20} true;
  assume !(($i18 == 1));
  goto $bb10;
$bb14:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 129, 5} true;
  assume ($i22 == 1);
  goto $bb1;
$bb15:
  assume !(($i22 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 131, 5} true;
  call $p23 := __errno_location();
  assume $isExternal($p23);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 131, 5} true;
  $M.16 := $store.i32($M.16, $p23, 5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 132, 5} true;
  $i14 := $sub.i32(0, 1);
  goto $bb9;
}
procedure {:inline 1} randombytes_sysrandom_stir()
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 208, 9} true;
  $i0 := $M.6;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 208, 9} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 208, 9} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 209, 9} true;
  call randombytes_sysrandom_init();
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 210, 9} true;
  $M.6 := 1;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 211, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 208, 9} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 212, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} randombytes_sysrandom_stir_if_needed()
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 217, 9} true;
  $i0 := $M.6;
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 217, 9} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 217, 9} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 218, 9} true;
  call randombytes_sysrandom_stir();
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 219, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 217, 9} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 220, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} read($i0: i32, $p1: ref, $i2: i64)
  returns ($r: i64);
procedure {:inline 1} safe_read(fd: i32, buf_: ref, size: i64)
  returns ($r: i64)
{
  var $i0: i1;
  var $i1: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i15: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $p14: ref;
  var $p16: ref;
  var $p2: ref;
  var $p5: ref;
  var $p8: ref;
$bb0:
  call {:cexpr "fd"} boogie_si_record_i32(fd);
  call {:cexpr "buf_"} boogie_si_record_ref(buf_);
  call {:cexpr "size"} boogie_si_record_i64(size);
  call {:cexpr "buf"} boogie_si_record_ref(buf_);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 82, 5} true;
  $i0 := $ugt.i64(size, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 82, 5} true;
  $i1, $p2 := size, buf_;
  assume {:branchcond $i0} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 82, 5} true;
  assume ($i0 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 84, 26} true;
  call $i3 := read(fd, $p2, $i1);
  call {:cexpr "readnb"} boogie_si_record_i64($i3);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 84, 26} true;
  $i4 := $slt.i64($i3, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 84, 26} true;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i0 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 82, 5} true;
  call __assert_fail(.str1991, .str2992, 82, __PRETTY_FUNCTION__.safe_read);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 82, 5} true;
  assume false;
$bb4:
  assume ($i4 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 17} true;
  call $p5 := __errno_location();
  assume $isExternal($p5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 17} true;
  $i6 := $load.i32($M.11, $p5);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 17} true;
  $i7 := $eq.i32($i6, 4);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 17} true;
  $i1, $p2 := $i1, $p2;
  assume {:branchcond $i7} true;
  goto $bb7, $bb8;
$bb5:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 84, 26} true;
  assume !(($i4 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 86, 13} true;
  $i11 := $slt.i64($i3, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 86, 13} true;
  assume {:branchcond $i11} true;
  goto $bb11, $bb12;
$bb7:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 17} true;
  assume ($i7 == 1);
  goto $bb2;
$bb8:
  assume !(($i7 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 35} true;
  call $p8 := __errno_location();
  assume $isExternal($p8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 35} true;
  $i9 := $load.i32($M.12, $p8);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 35} true;
  $i10 := $eq.i32($i9, 11);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 35} true;
  $i1, $p2 := $i1, $p2;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb9:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 35} true;
  assume ($i10 == 1);
  goto $bb2;
$bb10:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 85, 35} true;
  assume !(($i10 == 1));
  goto $bb6;
$bb11:
  assume ($i11 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 87, 13} true;
  $i12 := $i3;
  goto $bb13;
$bb12:
  assume !(($i11 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 89, 13} true;
  $i13 := $eq.i64($i3, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 89, 13} true;
  $p14 := $p2;
  assume {:branchcond $i13} true;
  goto $bb14, $bb16;
$bb13:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 97, 1} true;
  $r := $i12;
  $exn := false;
  return;
$bb14:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 89, 13} true;
  assume ($i13 == 1);
  goto $bb15;
$bb15:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 96, 5} true;
  $i18 := $p2i.ref.i64($p14);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 96, 5} true;
  $i19 := $p2i.ref.i64(buf_);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 96, 5} true;
  $i20 := $sub.i64($i18, $i19);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 96, 5} true;
  $i12 := $i20;
  goto $bb13;
$bb16:
  assume !(($i13 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 92, 9} true;
  $i15 := $sub.i64($i1, $i3);
  call {:cexpr "size"} boogie_si_record_i64($i15);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 93, 9} true;
  $p16 := $add.ref($p2, $mul.ref($i3, 1));
  call {:cexpr "buf"} boogie_si_record_ref($p16);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 94, 5} true;
  $i17 := $ugt.i64($i15, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 94, 5} true;
  $i1, $p2, $p14 := $i15, $p16, $p16;
  assume {:branchcond $i17} true;
  goto $bb17, $bb18;
$bb17:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 94, 5} true;
  assume ($i17 == 1);
  goto $bb2;
$bb18:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c", 94, 5} true;
  assume !(($i17 == 1));
  goto $bb15;
}
procedure {:inline 1} sodium_malloc(size: i64)
  returns ($r: ref)
{
  var $i1: i1;
  var $p0: ref;
  var $p2: ref;
$bb0:
  call {:cexpr "size"} boogie_si_record_i64(size);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 406, 16} true;
  call $p0 := _sodium_malloc(size);
  call {:cexpr "ptr"} boogie_si_record_ref($p0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 406, 16} true;
  $i1 := $eq.ref($p0, $0.ref);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 406, 16} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 407, 9} true;
  $p2 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 409, 5} true;
  call $M.1 := $memset.i8($M.1, $p0, $sub.i8(0, 48), size, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 411, 5} true;
  $p2 := $p0;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 412, 1} true;
  $r := $p2;
  $exn := false;
  return;
}
procedure {:inline 1} sodium_memzero(pnt: ref, len: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i2: i64;
  var $p3: ref;
$bb0:
  call {:cexpr "pnt"} boogie_si_record_ref(pnt);
  call {:cexpr "len"} boogie_si_record_i64(len);
  call {:cexpr "pnt_"} boogie_si_record_ref(pnt);
  call {:cexpr "i"} boogie_si_record_i64(0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 75, 5} true;
  $i0 := 0;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 75, 5} true;
  $i1 := $ult.i64($i0, len);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 75, 5} true;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 76, 9} true;
  $i2 := $add.i64($i0, 1);
  call {:cexpr "i"} boogie_si_record_i64($i2);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 76, 9} true;
  $p3 := $add.ref(pnt, $mul.ref($i0, 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 76, 9} true;
  $M.0 := $store.i8($M.0, $p3, 0);
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 77, 5} true;
  $i0 := $i2;
  goto $bb1;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "/home/vagrant/verifying-constant-time/examples/sodium/libsodium/src/libsodium/sodium/utils.c", 79, 1} true;
  $exn := false;
  return;
}
procedure {:inline 1} strchr($p0: ref, $i1: i32)
  returns ($r: ref);
axiom (.str1 == $sub.ref(0, 16));
axiom (.str2 == $sub.ref(0, 30));
axiom (.str3 == $sub.ref(0, 44));
axiom (canary == $sub.ref(0, 60));
axiom (stream == $sub.ref(0, 72));
axiom (.str990 == $sub.ref(0, 82));
axiom (randombytes_sysrandom_implementation == $sub.ref(0, 130));
axiom (.str1991 == $sub.ref(0, 149));
axiom (.str2992 == $sub.ref(0, 273));
axiom (__PRETTY_FUNCTION__.safe_read == $sub.ref(0, 323));
axiom (randombytes_sysrandom_random_dev_open.devices == $sub.ref(0, 347));
axiom (.str3993 == $sub.ref(0, 360));
axiom (.str4994 == $sub.ref(0, 372));
axiom (implementation_ == $sub.ref(0, 380));
axiom (.str995 == $sub.ref(0, 416));
axiom (.str1996 == $sub.ref(0, 520));
axiom (__PRETTY_FUNCTION__.randombytes == $sub.ref(0, 585));
axiom (.str999 == $sub.ref(0, 593));
axiom (crypto_onetimeauth_poly1305_donna_implementation == $sub.ref(0, 641));
axiom (__VERIFIER_assume == $sub.ref(0, 649));
axiom (llvm.dbg.declare == $sub.ref(0, 657));
axiom (__SMACK_dummy == $sub.ref(0, 665));
axiom (__SMACK_code == $sub.ref(0, 673));
axiom (__VERIFIER_nondet_unsigned_char == $sub.ref(0, 681));
axiom (__VERIFIER_nondet_unsigned_short == $sub.ref(0, 689));
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 697));
axiom (__VERIFIER_nondet_unsigned_long == $sub.ref(0, 705));
axiom (__VERIFIER_nondet == $sub.ref(0, 713));
axiom (__SMACK_decls == $sub.ref(0, 721));
axiom (__SMACK_top_decl == $sub.ref(0, 729));
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 737));
axiom (sodium_memzero == $sub.ref(0, 745));
axiom (abort == $sub.ref(0, 753));
axiom (strchr == $sub.ref(0, 761));
axiom (__errno_location == $sub.ref(0, 769));
axiom (sodium_malloc == $sub.ref(0, 777));
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 785));
axiom (free_ == $sub.ref(0, 793));
axiom (malloc == $sub.ref(0, 801));
axiom (_sodium_malloc == $sub.ref(0, 809));
axiom (_mprotect_noaccess == $sub.ref(0, 817));
axiom (_sodium_mprotect == $sub.ref(0, 825));
axiom (_mprotect_readonly == $sub.ref(0, 833));
axiom (_mprotect_readwrite == $sub.ref(0, 841));
axiom (randombytes_sysrandom_stir == $sub.ref(0, 849));
axiom (randombytes_sysrandom_close == $sub.ref(0, 857));
axiom (close == $sub.ref(0, 865));
axiom (randombytes_sysrandom == $sub.ref(0, 873));
axiom (randombytes_sysrandom_buf == $sub.ref(0, 881));
axiom (randombytes_sysrandom_implementation_name == $sub.ref(0, 889));
axiom (__assert_fail == $sub.ref(0, 897));
axiom (read == $sub.ref(0, 905));
axiom (open == $sub.ref(0, 913));
axiom (fstat == $sub.ref(0, 921));
axiom (fcntl == $sub.ref(0, 929));
axiom (randombytes_sysrandom_init == $sub.ref(0, 937));
axiom (randombytes_sysrandom_stir_if_needed == $sub.ref(0, 945));
axiom (safe_read == $sub.ref(0, 953));
axiom (randombytes_sysrandom_random_dev_open == $sub.ref(0, 961));
axiom (randombytes_random == $sub.ref(0, 969));
axiom (randombytes_buf == $sub.ref(0, 977));
axiom (crypto_verify_16 == $sub.ref(0, 985));
axiom (crypto_onetimeauth_poly1305_donna == $sub.ref(0, 993));
axiom (crypto_onetimeauth_poly1305_donna_init == $sub.ref(0, 1001));
axiom (crypto_onetimeauth_poly1305_donna_update == $sub.ref(0, 1009));
axiom (crypto_onetimeauth_poly1305_donna_final == $sub.ref(0, 1017));
axiom (crypto_onetimeauth_poly1305_donna_implementation_name == $sub.ref(0, 1025));
axiom (poly1305_init == $sub.ref(0, 1033));
axiom (poly1305_update == $sub.ref(0, 1041));
axiom (poly1305_finish == $sub.ref(0, 1049));
axiom (U32TO8 == $sub.ref(0, 1057));
axiom (poly1305_blocks == $sub.ref(0, 1065));
axiom (U8TO32 == $sub.ref(0, 1073));
axiom (crypto_onetimeauth_poly1305_donna_verify == $sub.ref(0, 1081));
axiom (crypto_onetimeauth_poly1305_donna_wrapper == $sub.ref(0, 1089));
axiom (public_in == $sub.ref(0, 1097));
axiom (__SMACK_value == $sub.ref(0, 1105));
axiom (llvm.dbg.value == $sub.ref(0, 1113));
axiom (__SMACK_static_init == $sub.ref(0, 1121));
procedure {:inline 1} $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom (forall f1, f2: float :: f1 != f2 || $foeq.bool(f1,f2));
axiom (forall f: float :: $si2fp.i128.float($fp2si.float.i128(f)) == f);
axiom (forall f: float :: $si2fp.i16.float($fp2si.float.i16(f)) == f);
axiom (forall f: float :: $si2fp.i24.float($fp2si.float.i24(f)) == f);
axiom (forall f: float :: $si2fp.i32.float($fp2si.float.i32(f)) == f);
axiom (forall f: float :: $si2fp.i48.float($fp2si.float.i48(f)) == f);
axiom (forall f: float :: $si2fp.i64.float($fp2si.float.i64(f)) == f);
axiom (forall f: float :: $si2fp.i8.float($fp2si.float.i8(f)) == f);
axiom (forall f: float :: $si2fp.i96.float($fp2si.float.i96(f)) == f);
axiom (forall f: float :: $ui2fp.i128.float($fp2ui.float.i128(f)) == f);
axiom (forall f: float :: $ui2fp.i16.float($fp2ui.float.i16(f)) == f);
axiom (forall f: float :: $ui2fp.i24.float($fp2ui.float.i24(f)) == f);
axiom (forall f: float :: $ui2fp.i32.float($fp2ui.float.i32(f)) == f);
axiom (forall f: float :: $ui2fp.i48.float($fp2ui.float.i48(f)) == f);
axiom (forall f: float :: $ui2fp.i64.float($fp2ui.float.i64(f)) == f);
axiom (forall f: float :: $ui2fp.i8.float($fp2ui.float.i8(f)) == f);
axiom (forall f: float :: $ui2fp.i96.float($fp2ui.float.i96(f)) == f);
axiom (forall i: i128 :: $fp2si.float.i128($si2fp.i128.float(i)) == i);
axiom (forall i: i128 :: $fp2ui.float.i128($ui2fp.i128.float(i)) == i);
axiom (forall i: i16 :: $fp2si.float.i16($si2fp.i16.float(i)) == i);
axiom (forall i: i16 :: $fp2ui.float.i16($ui2fp.i16.float(i)) == i);
axiom (forall i: i24 :: $fp2si.float.i24($si2fp.i24.float(i)) == i);
axiom (forall i: i24 :: $fp2ui.float.i24($ui2fp.i24.float(i)) == i);
axiom (forall i: i32 :: $fp2si.float.i32($si2fp.i32.float(i)) == i);
axiom (forall i: i32 :: $fp2ui.float.i32($ui2fp.i32.float(i)) == i);
axiom (forall i: i48 :: $fp2si.float.i48($si2fp.i48.float(i)) == i);
axiom (forall i: i48 :: $fp2ui.float.i48($ui2fp.i48.float(i)) == i);
axiom (forall i: i64 :: $fp2si.float.i64($si2fp.i64.float(i)) == i);
axiom (forall i: i64 :: $fp2ui.float.i64($ui2fp.i64.float(i)) == i);
axiom (forall i: i8 :: $fp2si.float.i8($si2fp.i8.float(i)) == i);
axiom (forall i: i8 :: $fp2ui.float.i8($ui2fp.i8.float(i)) == i);
axiom (forall i: i96 :: $fp2si.float.i96($si2fp.i96.float(i)) == i);
axiom (forall i: i96 :: $fp2ui.float.i96($ui2fp.i96.float(i)) == i);
const $EXTERNS_BOTTOM: ref;
const $GLOBALS_BOTTOM: ref;
const $MALLOC_TOP: ref;
const $MOP: $mop;
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $base(ref) returns (ref);
function $extractvalue(p: int, i: int) returns (int);
function $fadd.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $fmul.float(f1:float, f2:float) returns (float);
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $fp2ui.float.i128(f:float) returns (i128);
function $fp2ui.float.i16(f:float) returns (i16);
function $fp2ui.float.i24(f:float) returns (i24);
function $fp2ui.float.i32(f:float) returns (i32);
function $fp2ui.float.i48(f:float) returns (i48);
function $fp2ui.float.i64(f:float) returns (i64);
function $fp2ui.float.i8(f:float) returns (i8);
function $fp2ui.float.i96(f:float) returns (i96);
function $fpext.float.float(f:float) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $ftrue.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $not.i1(i: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i48(i: i48) returns (i48);
function $not.i64(i: i64) returns (i64);
function $not.i8(i: i8) returns (i8);
function $not.i96(i: i96) returns (i96);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $si2fp.bv128.float(i:bv128) returns (float);
function $si2fp.bv16.float(i:bv16) returns (float);
function $si2fp.bv24.float(i:bv24) returns (float);
function $si2fp.bv32.float(i:bv32) returns (float);
function $si2fp.bv48.float(i:bv48) returns (float);
function $si2fp.bv64.float(i:bv64) returns (float);
function $si2fp.bv8.float(i:bv8) returns (float);
function $si2fp.bv96.float(i:bv96) returns (float);
function $si2fp.i128.float(i:i128) returns (float);
function $si2fp.i16.float(i:i16) returns (float);
function $si2fp.i24.float(i:i24) returns (float);
function $si2fp.i32.float(i:i32) returns (float);
function $si2fp.i48.float(i:i48) returns (float);
function $si2fp.i64.float(i:i64) returns (float);
function $si2fp.i8.float(i:i8) returns (float);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
procedure {:inline 1} $alloc(n: ref) returns (p: ref)
modifies $CurrAddr, $Alloc;
{
  assume $sgt.ref.bool($CurrAddr, $0.ref);
  p := $CurrAddr;
  if ($sgt.ref.bool(n, $0.ref)) {
    $CurrAddr := $add.ref($CurrAddr, n);
  } else {
    $CurrAddr := $add.ref($CurrAddr, $1.ref);
  }
  $Alloc[p] := true;
}
procedure {:inline 1} $free(p: ref)
modifies $Alloc;
{
  $Alloc[p] := false;
}
procedure {:inline 1} boogie_si_record_bool(i: bool);
procedure {:inline 1} boogie_si_record_bv1(i: bv1);
procedure {:inline 1} boogie_si_record_bv128(i: bv128);
procedure {:inline 1} boogie_si_record_bv16(i: bv16);
procedure {:inline 1} boogie_si_record_bv24(i: bv24);
procedure {:inline 1} boogie_si_record_bv32(i: bv32);
procedure {:inline 1} boogie_si_record_bv48(i: bv48);
procedure {:inline 1} boogie_si_record_bv64(i: bv64);
procedure {:inline 1} boogie_si_record_bv8(i: bv8);
procedure {:inline 1} boogie_si_record_bv96(i: bv96);
procedure {:inline 1} boogie_si_record_float(i: float);
procedure {:inline 1} boogie_si_record_i1(i: i1);
procedure {:inline 1} boogie_si_record_i128(i: i128);
procedure {:inline 1} boogie_si_record_i16(i: i16);
procedure {:inline 1} boogie_si_record_i24(i: i24);
procedure {:inline 1} boogie_si_record_i32(i: i32);
procedure {:inline 1} boogie_si_record_i48(i: i48);
procedure {:inline 1} boogie_si_record_i64(i: i64);
procedure {:inline 1} boogie_si_record_i8(i: i8);
procedure {:inline 1} boogie_si_record_i96(i: i96);
procedure {:inline 1} boogie_si_record_mop(m: $mop);
procedure {:inline 1} boogie_si_record_ref(i: ref);
type $mop;
var $Alloc: [ref] bool;
var $CurrAddr:ref;
var $exn: bool;
var $exnv: int;
